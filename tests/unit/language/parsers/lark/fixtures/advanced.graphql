enum Episode @link_db(table: "movies.slug") {
    A_NEW_HOPE,
    THE_EMPIRE_STRIKES_BACK,
    RETURN_OF_THE_JEDI,
    THE_PHANTOM_MENACE,
    ATTACK_OF_THE_CLONES,
    REVENGE_OF_THE_SITH,
}

interface Character {
    id: String!
    name: String
    friends: [Character]
    appearsIn: [Episode] @default(value: A_NEW_HOPE)
}

interface Creature {
    name: String
    species: String
}

interface Vehicle {
    id: String!
    name: String
    owner: Owner
}

interface Location {
    id: String!
    name: String
    coordinates(default: [Float] = [0.0, 0.0, 0.0]): [Float]
}

type Planet implements Location {
    id: String!
    atmosphere: String
}

union Owner = Organization | Character  # This should cover most ownership cases

type Organization {
    id: String!
    name: String
    members: [Character]
}

type Human implements Character & Creature {
    id: String!
    name: String
    friends: [Character]
    appearsIn: [Episode]
    homePlanet: Location
}

type Droid implements Character {
    id: String!
    name: String
    friends: [Character] @deprecated(reason: "Droids can't have friends. Use the acquaintances field.")
    acquaintances: [Character]
    appearsIn: [Episode]
    primaryFunction: String
}

type Query {
    hero(episode: Episode): Character
    human(id: String!): Human
    droid(id: String!): Droid
    characters(filter: FilterCharacters): [Characters]
    planet(id: String!): Planet
}

input FilterCharacters {
    limit: Int
    sinceEpisode: Episode
}

"""
A custom scalar to represent time in the StarWars universe.
It should support nanoseconds and conversion to/from a flick.
"""
scalar Date

extend type Human {
    born: Date @limit(min: 0)
}

extend type Droid {
    produced: Date
}

extend input FilterCharacters {
    existsSince: Date
}
